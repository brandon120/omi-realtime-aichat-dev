generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(uuid()) @db.Uuid
  email              String              @unique
  passwordHash       String
  displayName        String?
  role               Role                @default(USER)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  agentEvents        AgentEvent[]
  sessions           AuthSession[]
  conversations      Conversation[]
  memories           Memory[]
  notificationEvents NotificationEvent[]
  omiSessions        OmiSession[]
  links              OmiUserLink[]
  contextWindows     UserContextWindow[]
}

model AuthSession {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @db.Uuid
  sessionToken String   @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

model OmiUserLink {
  id                     String    @id @default(uuid()) @db.Uuid
  userId                 String    @db.Uuid
  omiUserId              String    @unique
  isVerified             Boolean   @default(false)
  verificationCode       String?
  verificationExpiresAt  DateTime?
  verificationAttempts   Int       @default(0)
  verifiedAt             DateTime?
  createdAt              DateTime  @default(now())
  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model OmiSession {
  id                   String              @id @default(uuid()) @db.Uuid
  omiSessionId         String              @unique
  userId               String?             @db.Uuid
  openaiConversationId String?
  createdAt            DateTime            @default(now())
  lastSeenAt           DateTime            @default(now())
  conversations        Conversation[]
  user                 User?               @relation(fields: [userId], references: [id])
  transcriptSegments   TranscriptSegment[]

  @@index([userId])
}

model Conversation {
  id                   String              @id @default(uuid()) @db.Uuid
  userId               String?             @db.Uuid
  omiSessionId         String?             @db.Uuid
  openaiConversationId String
  title                String?
  summary              String?
  createdAt            DateTime            @default(now())
  endedAt              DateTime?
  agentEvents          AgentEvent[]
  omiSession           OmiSession?         @relation(fields: [omiSessionId], references: [id])
  user                 User?               @relation(fields: [userId], references: [id])
  messages             Message[]
  contextWindows       UserContextWindow[]

  @@index([userId])
  @@index([omiSessionId])
  @@index([openaiConversationId])
  @@unique([omiSessionId, openaiConversationId])
}

model Message {
  id             String        @id @default(uuid()) @db.Uuid
  conversationId String        @db.Uuid
  role           MessageRole
  text           String
  rawPayload     Json?
  source         MessageSource
  createdAt      DateTime      @default(now())
  conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId, createdAt])
  @@index([role])
  @@index([source])
}

model TranscriptSegment {
  id           String     @id @default(uuid()) @db.Uuid
  omiSessionId String     @db.Uuid
  omiSegmentId String
  text         String
  speaker      String?
  speakerId    Int?
  isUser       Boolean?
  start        Float?
  end          Float?
  createdAt    DateTime   @default(now())
  omiSession   OmiSession @relation(fields: [omiSessionId], references: [id], onDelete: Cascade)

  @@unique([omiSessionId, omiSegmentId])
  @@index([omiSessionId])
}

model UserContextWindow {
  id             String       @id @default(uuid()) @db.Uuid
  userId         String       @db.Uuid
  slot           Int
  conversationId String       @db.Uuid
  isActive       Boolean      @default(false)
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, slot])
  @@index([userId, isActive])
}

model AgentEvent {
  id             String        @id @default(uuid()) @db.Uuid
  userId         String?       @db.Uuid
  conversationId String?       @db.Uuid
  type           String
  payload        Json?
  createdAt      DateTime      @default(now())
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  user           User?         @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([conversationId])
}

model NotificationEvent {
  id        String              @id @default(uuid()) @db.Uuid
  userId    String?             @db.Uuid
  channel   NotificationChannel
  message   String
  status    String
  error     String?
  createdAt DateTime            @default(now())
  user      User?               @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([channel])
  @@index([createdAt])
}

model Memory {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  text      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum Role {
  USER
  ADMIN
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
  TOOL
}

enum MessageSource {
  FRONTEND
  OMI_TRANSCRIPT
  SYSTEM
  TOOL
}

enum NotificationChannel {
  OMI
  EMAIL
  PUSH
}
